import { createAuthMiddleware } from 'better-auth/plugins'

import AuditSDK from '@repo/audit'

import type { BetterAuthPlugin } from 'better-auth'

let auditSDK: AuditSDK | undefined = undefined

export const AuditSDKPlugin = async () => {
	if (!auditSDK) {
		// Initialize the SDK
		auditSDK = new AuditSDK(
			AuditSDK.withLogger({
				environment: 'development',
				application: 'api',
				module: 'auth',
				version: '0.1.0',
				defaultFields: {
					package: '@repo/auth',
					environment: 'development',
				},
			}),
			await AuditSDK.initialize({
				configPath: 'default/audit-development.json',
				storageType: 's3',
			})
		)
	}
	return {
		id: 'audit-sdk-plugin',
		hooks: {
			before: [
				{
					matcher: (context) => {
						return context.path === '/sign-out'
					},
					handler: createAuthMiddleware(async (ctx) => {
						const session = ctx.context.session
						console.log('BEFORE LOGOUT - BEFORE SESSION')
						// FIXME: session is undefined
						if (session) {
							const details = {
								principalId: session.session.userId,
								organizationId: session.session.activeOrganizationId as string,
								action: 'logout' as
									| 'login'
									| 'logout'
									| 'password_change'
									| 'mfa_enable'
									| 'mfa_disable',
								status: 'success' as 'success' | 'attempt' | 'failure',
								sessionContext: {
									sessionId: session.user.id,
									ipAddress:
										session.session.ipAddress && session.session.ipAddress.length > 0
											? session.session.ipAddress
											: '0.0.0.0',
									userAgent:
										session.session.userAgent && session.session.userAgent.length > 0
											? session.session.userAgent
											: 'unknown',
								},
							}
							if (auditSDK) {
								await auditSDK.logAuth(details)
							} else {
								console.error('Audit SDK not initialized')
							}
							console.log('BEFORE LOGOUT - AFTER SESSION')
						}
					}),
				},
			],
			after: [
				{
					matcher: (context) => {
						return context.path === '/sign-in/email'
					},
					handler: createAuthMiddleware(async (ctx) => {
						const newSession = ctx.context.newSession
						if (newSession) {
							const details = {
								principalId: newSession.session.userId,
								organizationId: newSession.session.activeOrganizationId as string,
								action: 'login' as
									| 'login'
									| 'logout'
									| 'password_change'
									| 'mfa_enable'
									| 'mfa_disable',
								status: 'success' as 'success' | 'attempt' | 'failure',
								sessionContext: {
									sessionId: newSession.user.id,
									ipAddress:
										newSession.session.ipAddress && newSession.session.ipAddress.length > 0
											? newSession.session.ipAddress
											: '0.0.0.0',
									userAgent:
										newSession.session.userAgent && newSession.session.userAgent.length > 0
											? newSession.session.userAgent
											: 'unknown',
								},
							}
							if (auditSDK) {
								await auditSDK.logAuth(details)
							} else {
								console.error('Audit SDK not initialized')
							}
						}
					}),
				},
			],
		},
	} satisfies BetterAuthPlugin
}
