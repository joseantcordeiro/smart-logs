# Production Deployment Pipeline for SMEDREC Audit Server
name: Deploy to Production

on:
  push:
    branches:
      - main
    paths:
      - 'apps/server/**'
      - 'packages/**'
      - '.github/workflows/deploy-production.yml'

  # Manual deployment trigger
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

      skip_tests:
        description: 'Skip tests (emergency deployment)'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: smedrec/audit-server
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # Security and vulnerability scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Build and test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type check
        run: pnpm run check-types
        working-directory: apps/server

      - name: Run tests
        run: pnpm run test:coverage
        working-directory: apps/server
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: apps/server/coverage/lcov.info
          flags: server
          name: audit-server

  # Build Docker image
  build-image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [security-scan, build-and-test]
    if: always() && (needs.security-scan.result == 'success' || needs.security-scan.result == 'skipped') && (needs.build-and-test.result == 'success' || needs.build-and-test.result == 'skipped')

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/server/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.spdx.json

  # Deploy to staging (if not production)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-image]
    if: ${{ github.ref != 'refs/heads/main' || inputs.environment == 'staging' }}
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to staging
        run: |
          export KUBECONFIG=kubeconfig

          # Update image in deployment
          kubectl set image deployment/audit-server \
            audit-server=${{ needs.build-image.outputs.image-tag }} \
            -n smedrec-audit-staging

          # Wait for rollout
          kubectl rollout status deployment/audit-server -n smedrec-audit-staging --timeout=600s

          # Verify deployment
          kubectl get pods -n smedrec-audit-staging -l app.kubernetes.io/name=audit-server

      - name: Run smoke tests
        run: |
          # Wait for service to be ready
          sleep 30

          # Basic health check
          curl -f https://staging-api.smedrec.com/health || exit 1

          # API endpoint test
          curl -f https://staging-api.smedrec.com/api/v1/health || exit 1

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-image, deploy-staging]
    if: ${{ github.ref == 'refs/heads/main' && (needs.deploy-staging.result == 'success' || needs.deploy-staging.result == 'skipped') && inputs.environment != 'staging' }}
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Pre-deployment backup
        run: |
          export KUBECONFIG=kubeconfig

          # Trigger backup job
          kubectl create job --from=cronjob/backup-job backup-pre-deploy-$(date +%s) -n smedrec-audit

          # Wait for backup to complete
          kubectl wait --for=condition=complete job/backup-pre-deploy-* -n smedrec-audit --timeout=600s

      - name: Deploy to production
        run: |
          export KUBECONFIG=kubeconfig

          # Update image in deployment with rolling update
          kubectl set image deployment/audit-server \
            audit-server=${{ needs.build-image.outputs.image-tag }} \
            -n smedrec-audit

          # Wait for rollout
          kubectl rollout status deployment/audit-server -n smedrec-audit --timeout=600s

          # Verify deployment
          kubectl get pods -n smedrec-audit -l app.kubernetes.io/name=audit-server

      - name: Post-deployment verification
        run: |
          # Wait for service to be ready
          sleep 60

          # Health checks
          curl -f https://api.smedrec.com/health || exit 1
          curl -f https://api.smedrec.com/ready || exit 1

          # API endpoint tests
          curl -f https://api.smedrec.com/api/v1/health || exit 1

          # Database connectivity test
          curl -f -H "x-api-key: ${{ secrets.API_KEY }}" \
            https://api.smedrec.com/api/v1/audit/events?limit=1 || exit 1

      - name: Rollback on failure
        if: failure()
        run: |
          export KUBECONFIG=kubeconfig

          echo "Deployment failed, rolling back..."
          kubectl rollout undo deployment/audit-server -n smedrec-audit
          kubectl rollout status deployment/audit-server -n smedrec-audit --timeout=300s

  # Notify deployment status
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()

    steps:
      - name: Notify Slack on success
        if: ${{ needs.deploy-production.result == 'success' || needs.deploy-staging.result == 'success' }}
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: |
            ✅ SMEDREC Audit Server deployed successfully!

            Environment: ${{ inputs.environment || 'production' }}
            Commit: ${{ github.sha }}
            Actor: ${{ github.actor }}

            🔗 [View Deployment](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on failure
        if: ${{ needs.deploy-production.result == 'failure' || needs.deploy-staging.result == 'failure' }}
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          text: |
            ❌ SMEDREC Audit Server deployment failed!

            Environment: ${{ inputs.environment || 'production' }}
            Commit: ${{ github.sha }}
            Actor: ${{ github.actor }}

            🔗 [View Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create GitHub release
        if: ${{ needs.deploy-production.result == 'success' && github.ref == 'refs/heads/main' }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            ## SMEDREC Audit Server Release v${{ github.run_number }}

            **Deployed to Production:** ${{ github.event.head_commit.timestamp }}
            **Commit:** ${{ github.sha }}
            **Actor:** ${{ github.actor }}

            ### Changes
            ${{ github.event.head_commit.message }}

            ### Docker Image
            `${{ needs.build-image.outputs.image-tag }}`

            ### Verification
            - ✅ Security scan passed
            - ✅ Tests passed
            - ✅ Staging deployment successful
            - ✅ Production deployment successful
            - ✅ Post-deployment verification passed
          draft: false
          prerelease: false
