name: Audit System Tests

on:
  push:
    branches: [main, develop]
    paths:
      - 'packages/audit/**'
      - 'packages/audit-db/**'
      - 'apps/worker/**'
      - '.github/workflows/audit-system-tests.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'packages/audit/**'
      - 'packages/audit-db/**'
      - 'apps/worker/**'
      - '.github/workflows/audit-system-tests.yml'

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Unit and Integration Tests
  unit-integration-tests:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: audit_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm build

      - name: Run database migrations
        run: pnpm audit-db:migrate
        env:
          AUDIT_DB_URL: postgresql://postgres:postgres@localhost:5432/audit_test

      - name: Run unit tests
        run: pnpm --filter @repo/audit test:unit
        env:
          AUDIT_DB_URL: postgresql://postgres:postgres@localhost:5432/audit_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          REDIS_DB: 1

      - name: Run integration tests
        run: pnpm --filter @repo/audit test:integration
        env:
          AUDIT_DB_URL: postgresql://postgres:postgres@localhost:5432/audit_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          REDIS_DB: 1

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: unit-integration-test-results
          path: |
            packages/audit/test-results/
            packages/audit/coverage/

  # End-to-End Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: unit-integration-tests

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: audit_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm build

      - name: Run database migrations
        run: pnpm audit-db:migrate
        env:
          AUDIT_DB_URL: postgresql://postgres:postgres@localhost:5432/audit_test

      - name: Run end-to-end tests
        run: pnpm --filter @repo/audit test:e2e
        env:
          AUDIT_DB_URL: postgresql://postgres:postgres@localhost:5432/audit_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          REDIS_DB: 1

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: packages/audit/test-results/

  # External Dependencies Tests
  external-deps-tests:
    name: External Dependencies Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: unit-integration-tests

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: audit_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm build

      - name: Run database migrations
        run: pnpm audit-db:migrate
        env:
          AUDIT_DB_URL: postgresql://postgres:postgres@localhost:5432/audit_test

      - name: Run external dependencies tests
        run: pnpm --filter @repo/audit test:external-deps
        env:
          AUDIT_DB_URL: postgresql://postgres:postgres@localhost:5432/audit_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          REDIS_DB: 1

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: external-deps-test-results
          path: packages/audit/test-results/

  # Load Tests (only on main branch or when specifically requested)
  load-tests:
    name: Load Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.ref == 'refs/heads/main' || contains(github.event.pull_request.labels.*.name, 'run-load-tests')
    needs: [unit-integration-tests, e2e-tests]

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: audit_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          # Increase memory for load tests
          node-options: '--max-old-space-size=4096'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm build

      - name: Run database migrations
        run: pnpm audit-db:migrate
        env:
          AUDIT_DB_URL: postgresql://postgres:postgres@localhost:5432/audit_test

      - name: Run load tests
        run: pnpm --filter @repo/audit test:load
        env:
          AUDIT_DB_URL: postgresql://postgres:postgres@localhost:5432/audit_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          REDIS_DB: 1
          NODE_OPTIONS: '--max-old-space-size=4096'

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: load-test-results
          path: packages/audit/test-results/

  # Chaos Engineering Tests (only on main branch or when specifically requested)
  chaos-tests:
    name: Chaos Engineering Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    if: github.ref == 'refs/heads/main' || contains(github.event.pull_request.labels.*.name, 'run-chaos-tests')
    needs: [unit-integration-tests, e2e-tests]

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: audit_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm build

      - name: Run database migrations
        run: pnpm audit-db:migrate
        env:
          AUDIT_DB_URL: postgresql://postgres:postgres@localhost:5432/audit_test

      - name: Run chaos engineering tests
        run: pnpm --filter @repo/audit test:chaos
        env:
          AUDIT_DB_URL: postgresql://postgres:postgres@localhost:5432/audit_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          REDIS_DB: 1

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: chaos-test-results
          path: packages/audit/test-results/

  # CI Test Suite
  ci-test-suite:
    name: CI Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: unit-integration-tests

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: audit_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm build

      - name: Run database migrations
        run: pnpm audit-db:migrate
        env:
          AUDIT_DB_URL: postgresql://postgres:postgres@localhost:5432/audit_test

      - name: Run CI test suite
        run: pnpm --filter @repo/audit test:ci-suite
        env:
          AUDIT_DB_URL: postgresql://postgres:postgres@localhost:5432/audit_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          REDIS_DB: 1

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: ci-test-suite-results
          path: packages/audit/test-results/

  # Coverage Report
  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [unit-integration-tests, e2e-tests, external-deps-tests, ci-test-suite]

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: audit_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm build

      - name: Run database migrations
        run: pnpm audit-db:migrate
        env:
          AUDIT_DB_URL: postgresql://postgres:postgres@localhost:5432/audit_test

      - name: Generate coverage report
        run: pnpm --filter @repo/audit test:coverage
        env:
          AUDIT_DB_URL: postgresql://postgres:postgres@localhost:5432/audit_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          REDIS_DB: 1

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: packages/audit/coverage/lcov.info
          flags: audit-system
          name: audit-system-coverage
          fail_ci_if_error: false

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: packages/audit/coverage/

  # Test Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-integration-tests, e2e-tests, external-deps-tests, ci-test-suite]
    if: always()

    steps:
      - name: Download all test results
        uses: actions/download-artifact@v3

      - name: Generate test summary
        run: |
          echo "# Audit System Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check job results
          if [[ "${{ needs.unit-integration-tests.result }}" == "success" ]]; then
            echo "✅ Unit & Integration Tests: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Unit & Integration Tests: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.e2e-tests.result }}" == "success" ]]; then
            echo "✅ End-to-End Tests: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ End-to-End Tests: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.external-deps-tests.result }}" == "success" ]]; then
            echo "✅ External Dependencies Tests: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ External Dependencies Tests: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.ci-test-suite.result }}" == "success" ]]; then
            echo "✅ CI Test Suite: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ CI Test Suite: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Additional Information" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Node.js Version**: ${{ env.NODE_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **pnpm Version**: ${{ env.PNPM_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **PostgreSQL Version**: 14" >> $GITHUB_STEP_SUMMARY
          echo "- **Redis Version**: 7" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow Run**: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY

      - name: Check overall test status
        run: |
          if [[ "${{ needs.unit-integration-tests.result }}" != "success" ]] || \
             [[ "${{ needs.e2e-tests.result }}" != "success" ]] || \
             [[ "${{ needs.external-deps-tests.result }}" != "success" ]] || \
             [[ "${{ needs.ci-test-suite.result }}" != "success" ]]; then
            echo "Some tests failed"
            exit 1
          else
            echo "All tests passed"
          fi
